{"ast":null,"code":"var _jsxFileName = \"/home/klam/personal/portfolioWebsite/personal-portfolio/src/components/NavigationBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavigationBar = () => {\n  _s();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(null);\n  const homeRef = useRef(null);\n  const aboutRef = useRef(null);\n  const projectsRef = useRef(null);\n  const writingsRef = useRef(null);\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY >= 40);\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n  const scrollToSection = ref => {\n    if (ref && ref.current) {\n      window.scrollTo({\n        top: ref.current.offsetTop,\n        behavior: \"smooth\"\n      });\n    }\n  };\n  const handleNavigationClick = index => {\n    setActiveIndex(index);\n    switch (index) {\n      case 0:\n        scrollToSection(homeRef);\n        break;\n      case 1:\n        scrollToSection(aboutRef);\n        break;\n      case 2:\n        scrollToSection(projectsRef);\n        break;\n      default:\n        break;\n    }\n  };\n  const navigatorItems = [{\n    name: \"Home\"\n  }, {\n    name: \"About\"\n  }, {\n    name: \"Projects\"\n  }];\n  const navLinksClass = isScrolled ? \"nav-links-filled\" : \"nav-links\"; //Checks whether the navigationBar scrolled to the section.\n  const navSliderClass = activeIndex !== null ? `nav-slider ${navigatorItems[activeIndex].name}` : \"nav-slider\"; //If a navigationItem has been clicked from the navigationBar, set the class of the clicked navigationItem.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nav\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: navLinksClass,\n      children: [navigatorItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => handleNavigationClick(index),\n        className: `nav-links-item ${activeIndex === index ? \"active\" : \"\"}`,\n        children: item.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: navSliderClass\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(NavigationBar, \"q/j+jXUoVm4be3/sXjcDp80Dtqk=\");\n_c = NavigationBar;\nexport default NavigationBar;\nvar _c;\n$RefreshReg$(_c, \"NavigationBar\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","NavigationBar","_s","isScrolled","setIsScrolled","activeIndex","setActiveIndex","homeRef","aboutRef","projectsRef","writingsRef","handleScroll","window","scrollY","addEventListener","removeEventListener","scrollToSection","ref","current","scrollTo","top","offsetTop","behavior","handleNavigationClick","index","navigatorItems","name","navLinksClass","navSliderClass","className","children","map","item","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/klam/personal/portfolioWebsite/personal-portfolio/src/components/NavigationBar.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport '../App.css';\n\nexport const NavigationBar = () => {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(null);\n  const homeRef = useRef(null);\n  const aboutRef = useRef(null);\n  const projectsRef = useRef(null);\n  const writingsRef = useRef(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY >= 40);\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  const scrollToSection = (ref) => {\n    if (ref && ref.current) {\n      window.scrollTo({\n        top: ref.current.offsetTop,\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  const handleNavigationClick = (index) => {\n    setActiveIndex(index);\n    switch(index) {\n      case 0:\n        scrollToSection(homeRef);\n        break;\n      case 1:\n        scrollToSection(aboutRef);\n        break;\n      case 2:\n        scrollToSection(projectsRef);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const navigatorItems = [\n    { name: \"Home\" },\n    { name: \"About\" },\n    { name: \"Projects\" },\n  ];\n\n  const navLinksClass = isScrolled ? \"nav-links-filled\" : \"nav-links\"; //Checks whether the navigationBar scrolled to the section.\n  const navSliderClass = activeIndex !== null ? `nav-slider ${navigatorItems[activeIndex].name}` : \"nav-slider\"; //If a navigationItem has been clicked from the navigationBar, set the class of the clicked navigationItem.\n\n  return (\n    <div className=\"nav\">\n      <div className={navLinksClass}>\n        {navigatorItems.map((item, index) => (\n          <span key={index} onClick={() => handleNavigationClick(index)} className={`nav-links-item ${activeIndex === index ? \"active\" : \"\"}`}>\n            {item.name}\n          </span>\n        ))}\n        <div className={navSliderClass} />\n      </div>\n    </div>\n  );\n}\n\nexport default NavigationBar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}